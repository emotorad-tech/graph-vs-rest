package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.38

import (
	"context"
	"graphql/graph/model"
	"graphql/middlewares"
	"time"
)

// CheckToken is the resolver for the checkToken field.
func (r *mutationResolver) CheckToken(ctx context.Context, input string) (*model.Token, error) {
	tokenMaker, err := middlewares.GetTokenMakerFromContext(ctx)
	if err != nil {
		return nil, err
	}

	payload, err := tokenMaker.VerifyToken(input)
	if err != nil {
		return nil, err
	}

	if payload.Name != "test" {
		return &model.Token{
			Valid: false,
			Token: input,
		}, nil
	}
	return &model.Token{
		Valid: true,
		Token: input,
	}, nil
}

// GetToken is the resolver for the getToken field.
func (r *queryResolver) GetToken(ctx context.Context) (string, error) {
	tokenMaker, err := middlewares.GetTokenMakerFromContext(ctx)
	if err != nil {
		return "", err
	}

	token, err := tokenMaker.CreateToken("test", time.Minute*30)
	if err != nil {
		return "", err
	}

	return token, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
