package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.38

import (
	"context"
	"fmt"
	"graphql/graph/model"
	"graphql/middlewares"
	"log"
	"math/rand"
	"time"
)

// InsertData is the resolver for the insertData field.
func (r *mutationResolver) InsertData(ctx context.Context, input string) (*model.Data, error) {
	panic(fmt.Errorf("not implemented: InsertData - insertData"))
}

// GetData is the resolver for the getData field.
func (r *queryResolver) GetData(ctx context.Context) ([]*model.Data, error) {
	ra := rand.New(rand.NewSource(time.Now().UnixNano()))
	query := fmt.Sprintf(`SELECT id, phone, name, age FROM dummy WHERE age = %d`, ra.Intn(10))
	db, _ := middlewares.GetDatabaseFromContext(ctx)
	row, _ := db.Query(ctx, query)
	var data model.Data
	var result []*model.Data
	for row.Next() {
		if row.Scan(&data.ID, &data.Phone, &data.Name, &data.Age) != nil {
			log.Panic("something went wrong")
		}
		result = append(result, &data)
	}
	return result, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
